//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pwir_Projekt_Wpf.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateEnergy", ReplyAction="http://tempuri.org/IService1/CalculateEnergyResponse")]
        double CalculateEnergy(double catWeight, double multiplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateEnergy", ReplyAction="http://tempuri.org/IService1/CalculateEnergyResponse")]
        System.Threading.Tasks.Task<double> CalculateEnergyAsync(double catWeight, double multiplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateDensity", ReplyAction="http://tempuri.org/IService1/CalculateDensityResponse")]
        double[] CalculateDensity(double protein, double fat, double ash, double fiber, double humidity, double other);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateDensity", ReplyAction="http://tempuri.org/IService1/CalculateDensityResponse")]
        System.Threading.Tasks.Task<double[]> CalculateDensityAsync(double protein, double fat, double ash, double fiber, double humidity, double other);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateGrams", ReplyAction="http://tempuri.org/IService1/CalculateGramsResponse")]
        double CalculateGrams(double catCalories, double foodDensity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateGrams", ReplyAction="http://tempuri.org/IService1/CalculateGramsResponse")]
        System.Threading.Tasks.Task<double> CalculateGramsAsync(double catCalories, double foodDensity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Pwir_Projekt_Wpf.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Pwir_Projekt_Wpf.ServiceReference1.IService1>, Pwir_Projekt_Wpf.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double CalculateEnergy(double catWeight, double multiplier) {
            return base.Channel.CalculateEnergy(catWeight, multiplier);
        }
        
        public System.Threading.Tasks.Task<double> CalculateEnergyAsync(double catWeight, double multiplier) {
            return base.Channel.CalculateEnergyAsync(catWeight, multiplier);
        }
        
        public double[] CalculateDensity(double protein, double fat, double ash, double fiber, double humidity, double other) {
            return base.Channel.CalculateDensity(protein, fat, ash, fiber, humidity, other);
        }
        
        public System.Threading.Tasks.Task<double[]> CalculateDensityAsync(double protein, double fat, double ash, double fiber, double humidity, double other) {
            return base.Channel.CalculateDensityAsync(protein, fat, ash, fiber, humidity, other);
        }
        
        public double CalculateGrams(double catCalories, double foodDensity) {
            return base.Channel.CalculateGrams(catCalories, foodDensity);
        }
        
        public System.Threading.Tasks.Task<double> CalculateGramsAsync(double catCalories, double foodDensity) {
            return base.Channel.CalculateGramsAsync(catCalories, foodDensity);
        }
    }
}
